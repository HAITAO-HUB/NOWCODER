题目描述
某餐馆有n张桌子，每张桌子有一个参数：a 可容纳的最大人数；
有m批客人，每批客人有两个参数:b人数，c预计消费金额。 在不允许拼桌的情况下，请实现一个算法选择其中一部分客人，使得总预计消费金额最大

输入描述：
输入包括m+2行。 第一行两个整数n(1 <= n <= 50000),m(1 <= m <= 50000) 第二行为n个参数a,即每个桌子可容纳的最大人数,以空格分隔,范围均在32位int范围内。
接下来m行，每行两个参数b,c。分别表示第i批客人的人数和预计消费金额,以空格分隔,范围均在32位int范围内。

输出描述：
输出一个整数,表示最大的总预计消费金额

import java.util.*;

public class Main{
    public static void main(String[] args){
        Scanner scan=new Scanner(System.in);
        while(scan.hasNext()){
            int n=scan.nextInt();
            int m=scan.nextInt();
            int[] arr=new int[n];
            for(int i=0;i<n;i++){
                arr[i]=scan.nextInt();
            }
            Arrays.sort(arr);
            int[][] s=new int[m][2];
            for(int i=0;i<m;i++){
                s[i][0]=scan.nextInt();
                s[i][1]=scan.nextInt();
            }
            Arrays.sort(s,new Comparator<int[]>(){
                public int compare(int[] o1,int[] o2){
                    return o2[1]-o1[1];
                }
            });
            
            long max=0L;
            int[] isUsed=new int[n];
            
            for(int i=0;i<m;i++){
                if(arr[n-1]<s[i][0]){
                    continue;
                }
                int num=s[i][0];//人数
                int price=s[i][1];//消费金额
                
                int index=binarySearch(num,arr);
                while(index<n&&isUsed[index]==1){
                    index++;
                }
                if(index<n){
                    max+=price;
                    isUsed[index]=1;
                }
            }
             System.out.println(max);
        }
    }
    
    public static int binarySearch(int num, int[] a){
        int left = 0;
        int right = a.length-1;
        int mid = 0;
        while(left <= right){
            mid = (right+left)/2;
            if(num <= a[mid]){
                right = mid-1;
            }else{
                left = mid+1;
            }
        }
        return left;
    }
}