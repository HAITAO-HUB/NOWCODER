package lesson;

public class InterruptThread {

    //中断线程，线程没有处理中断
    public static void test1(){
        Thread t=new Thread(new Runnable() {
            @Override
            public void run() {
                while (true){

                }
            }
        });
        t.start();
        t.interrupt();
    }

    public static void test2(){
        Thread t=new Thread(new Runnable() {
            @Override
            public void run() {
              /*  for(int i=0;i<50;i++){
                    System.out.println(i+":"+Thread.currentThread().isInterrupted());
                }*/
                /*while (!Thread.currentThread().isInterrupted()){
                    System.out.println(Thread.currentThread().getName());
                }*/
                while (!Thread.interrupted()){
                    System.out.println(Thread.currentThread().getName());
                }
            }
        });
        t.start();
        t.interrupt();
    }

    public static void test3(){
        Thread t=new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    Thread.sleep(3000);
                    //线程处于调用wait()，join()，sleep()阻塞时，如果把当前线程给中断，会直接抛一个异常
                    //阻塞状态时，通过捕获及处理异常，来处理线程的中断逻辑
                    //抛出异常后，线程中断标志位会进行重置
                    System.out.println(Thread.currentThread().getName());
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
        t.start();
        t.interrupt();
    }
    public static void test4(){
        Thread t=new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i = 0; i < 10; i++) {
                    //System.out.println(Thread.interrupted());//返回中断标志位并重置标志位
                    System.out.println(Thread.currentThread().isInterrupted());
                }
            }
        });
        t.start();
        t.interrupt();
    }
    public static void main(String[] args) {
        //test2();
        //test3();
        test4();
    }
}
