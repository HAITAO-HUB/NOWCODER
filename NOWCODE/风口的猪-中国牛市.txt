
风口之下，猪都能飞。当今中国股市牛市，真可谓“错过等七年”。
 给你一个回顾历史的机会，已知一支股票连续n天的价格走势，
以长度为n的整数数组表示，数组中第i个元素（prices[i]）代表该股票第i天的股价。
 假设你一开始没有股票，但有至多两次买入1股而后卖出1股的机会，
并且买入前一定要先保证手上没有股票。若两次交易机会都放弃，收益为0。
 设计算法，计算你能获得的最大收益。 输入数值范围：2<=n<=100,0<=prices[i]<=100


示例1
输入
3,8,5,1,7,8

输出
12

public class Solution {
    /**
     * 计算你能获得的最大收益
     * 
     * @param prices Prices[i]即第i天的股价
     * @return 整型
     */
    public int calculateMax(int[] prices) {
        int firstBuy = Integer.MAX_VALUE;   // 第一次买入最好的价格，越低越好
        int firstSell = 0;                  // 第一次卖出后的最高收益，越高越好
        int secondBuy = Integer.MIN_VALUE; // 第二次买入时还剩余的最高收益，越高越好
        int secondSell = 0;                // 第二次卖出时总的最高收益，越高越好
   
        for (int price : prices) {            // 当前价格下第一次买入的价格
            firstBuy = Math.min(firstBuy, price);            // 当前价格 - 买入价格 就是当前价格下第一次买卖的收益
            firstSell = Math.max(firstSell, price - firstBuy);            // 第一次卖出的收益 - 当前价格，即当前价格下，第二次买入后还剩余收益
            secondBuy = Math.max(secondBuy, firstSell - price);            // 剩余收益 + 当前价格，即当前价格下，第二次买卖的收益
            secondSell = Math.max(secondSell, secondBuy + price);        }
        return secondSell; 
    }
}